{"version":3,"sources":["services/index.js","actions/index.js","pages/Login.js","components/Header.jsx","components/NovaDespesa.jsx","components/TabelaDespesa.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["currenciesAPI","fetch","then","r","json","ok","Promise","resolve","reject","requestCurrenciesSuccess","currencies","type","fetchCurrencies","dispatch","a","error","Login","state","email","password","disabled","login","handleChange","bind","handleClick","loginValidation","handleEmail","this","props","setState","target","name","value","test","length","className","onChange","data-testid","placeholder","onClick","to","React","Component","connect","payload","emailChange","Header","getTotalExpenses","expenses","reduce","total","each","currency","exchangeRates","rate","parseFloat","ask","toFixed","user","wallet","defaultProps","INITIAL_STATE","description","method","tag","id","NovaDespesa","renderInput","renderSelect","e","preventDefault","saveExpense","label","htmlFor","map","key","options","option","renderSelectCurrencies","getCurrencies","expense","TabelaDespesa","index","parseInt","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE_USER","INITIAL_STATE_WALLET","reducer","combineReducers","action","isFetching","Object","keys","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7ebb35e5.chunk.js","sourcesContent":["const API_URL = 'https://economia.awesomeapi.com.br/json/all';\n\nconst currenciesAPI = () => (\n  fetch(API_URL)\n    .then((r) => (\n      r.json()\n        .then((json) => (r.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default currenciesAPI;\n","import currenciesAPI from '../services';\n\nexport const EMAIL = 'EMAIL';\nexport const REQUEST_START = 'REQUEST_START';\nexport const REQUEST_SUCCESS = 'REQUEST_SUCCESS';\nexport const REQUEST_FAIL = 'REQUEST_FAIL';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\n\nexport const emailChange = (payload) => ({\n  type: EMAIL,\n  payload,\n});\n\nconst requestCurrenciesTry = () => ({\n  type: REQUEST_START,\n});\n\nconst requestCurrenciesSuccess = (currencies) => ({\n  type: REQUEST_SUCCESS,\n  currencies,\n});\n\nconst requestCurrenciesFail = (error) => ({\n  type: REQUEST_FAIL,\n  error,\n});\n\nexport const fetchCurrencies = () => async (dispatch) => {\n  try {\n    dispatch(requestCurrenciesTry());\n\n    const currencies = await currenciesAPI();\n\n    dispatch(requestCurrenciesSuccess(currencies));\n  } catch (error) {\n    dispatch(requestCurrenciesFail(error));\n  }\n};\n\nexport const saveExpense = (expenses) => ({\n  type: SAVE_EXPENSE,\n  expenses,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { emailChange } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n      login: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.loginValidation = this.loginValidation.bind(this);\n  }\n\n  // Atualiza estado geral do email ao clicar\n  handleClick() {\n    const { handleEmail } = this.props;\n    const { email } = this.state;\n    this.setState({ login: true });\n    handleEmail(email);\n  }\n\n  // Atualiza estado do email e senha na p√°gina de Login\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => {\n      this.loginValidation();\n    });\n  }\n\n  // Verifica se o email e senha s√£o v√°lidos\n  loginValidation() {\n    const { email, password } = this.state;\n    let disabled = false;\n    const emailValidation = /^[\\w]+@([\\w]+\\.)+[\\w]{2,4}$/gi;\n    const passwordLength = 6;\n    disabled = !(emailValidation.test(email) && password.length >= passwordLength);\n    this.setState({ disabled });\n  }\n\n  render() {\n    const { email, password, disabled, login } = this.state;\n    return (\n      <main className=\"login-main\">\n        <header className=\"login-header\">\n          <h1>Trybe Wallet</h1>\n        </header>\n        <form className=\"login-form\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.handleChange }\n            data-testid=\"email-input\"\n            placeholder=\"user@email.com\"\n            className=\"login-input\"\n          />\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={ password }\n            onChange={ this.handleChange }\n            data-testid=\"password-input\"\n            placeholder=\"******\"\n            className=\"login-input\"\n          />\n          <button\n            type=\"submit\"\n            disabled={ disabled }\n            onClick={ this.handleClick }\n            className=\"login-btn\"\n          >\n            Entrar\n          </button>\n        </form>\n        {login ? <Redirect to=\"/carteira\" /> : ''}\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  handleEmail: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleEmail: (payload) => dispatch(emailChange(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n\n    this.getTotalExpenses = this.getTotalExpenses.bind(this);\n  }\n\n  // Soma todas as despesas\n  getTotalExpenses() {\n    const { expenses } = this.props;\n    const totalExpenses = expenses.reduce((total, each) => {\n      const { value, currency, exchangeRates } = each;\n      const rate = parseFloat(exchangeRates[currency].ask);\n      return total + parseFloat(value) * rate;\n    }, 0);\n    return totalExpenses.toFixed(2);\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <header className=\"wallet-header\">\n        <h1>Trybe Wallet</h1>\n        <p data-testid=\"email-field\" className=\"wallet-email\">{`E-mail: ${email}`}</p>\n        <div className=\"wallet-total-value\">\n          <span data-testid=\"total-field\">\n            {`Despesa Total: R$ ${this.getTotalExpenses()} `}\n          </span>\n          <span data-testid=\"header-currency-field\">BRL</span>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object),\n};\n\nHeader.defaultProps = {\n  expenses: [],\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport currenciesAPI from '../services';\nimport { fetchCurrencies as getCurrencies, saveExpense as addExpense } from '../actions';\n\nconst INITIAL_STATE = {\n  value: '0',\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimenta√ß√£o',\n  id: 0,\n};\n\nclass NovaDespesa extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ...INITIAL_STATE,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.renderInput = this.renderInput.bind(this);\n    this.renderSelect = this.renderSelect.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  // Adiciona a despesa na tabela\n  async handleClick(e) {\n    e.preventDefault();\n    const { value, description, currency, method, tag, id } = this.state;\n    const { saveExpense } = this.props;\n    const exchangeRates = await currenciesAPI();\n    const expense = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n    };\n    saveExpense(expense);\n    this.setState({\n      ...INITIAL_STATE,\n      id: id + 1,\n    });\n  }\n\n  // Renderiza os inputs de Valor e Descri√ß√£o\n  renderInput(label, type, name, value) {\n    return (\n      <label htmlFor={ `${name}-input` }>\n        {`${label}: `}\n        <input\n          type={ type }\n          id={ `${name}-input` }\n          name={ name }\n          data-testid={ `${name}-input` }\n          onChange={ this.handleChange }\n          value={ value }\n          className={ `${name}-input` }\n        />\n      </label>\n    );\n  }\n\n  // Renderiza o input de Moedas\n  renderSelectCurrencies(value, handleChange) {\n    const { currencies } = this.props;\n    return (\n      <select\n        id=\"currency-input\"\n        name=\"currency\"\n        data-testid=\"currency-input\"\n        onChange={ handleChange }\n        value={ value }\n        className=\"currency-input\"\n      >\n        {currencies.map((currency) => {\n          if (currency === 'USDT') return '';\n          return (\n            <option key={ currency } data-testid={ currency }>\n              {currency}\n            </option>\n          );\n        })}\n      </select>\n    );\n  }\n\n  // Renderiza os inputs de Tags e M√©todos\n  renderSelect(label, name, value, options) {\n    return (\n      <label htmlFor={ `${name}-input` }>\n        {`${label}: `}\n        <select\n          id={ `${name}-input` }\n          name={ name }\n          data-testid={ `${name}-input` }\n          onChange={ this.handleChange }\n          value={ value }\n        >\n          {options.map((option) => (\n            <option key={ option }>{option}</option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    const tags = ['Alimenta√ß√£o', 'Lazer', 'Trabalho', 'Transporte', 'Sa√∫de'];\n    const methods = ['Dinheiro', 'Cart√£o de cr√©dito', 'Cart√£o de d√©bito'];\n    return (\n      <form className=\"new-expense-form\">\n        <label htmlFor=\"currency-input\">\n          {'Moeda: '}\n          {this.renderSelectCurrencies(currency, this.handleChange)}\n        </label>\n        {this.renderInput('Valor', 'number', 'value', value)}\n        {this.renderInput('Descri√ß√£o', 'text', 'description', description)}\n        {this.renderSelect('Tag', 'tag', tag, tags)}\n        {this.renderSelect('M√©todo de pagamento', 'method', method, methods)}\n        <button\n          type=\"submit\"\n          onClick={ this.handleClick }\n          className=\"expense-btn add-expense\"\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrencies: () => dispatch(getCurrencies()),\n  saveExpense: (expense) => dispatch(addExpense(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NovaDespesa);\n\nNovaDespesa.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string),\n  saveExpense: PropTypes.func.isRequired,\n};\n\nNovaDespesa.defaultProps = {\n  currencies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass TabelaDespesa extends React.Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead className=\"table-header\">\n          <tr>\n            <th>Moeda</th>\n            <th>Valor</th>\n            <th>C√¢mbio utilizado</th>\n            <th>Moeda de convers√£o</th>\n            <th>Valor convertido</th>\n            <th>Descri√ß√£o</th>\n            <th>Tag</th>\n            <th>M√©todo de pagamento</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody className=\"table-body\">\n          {expenses.map((expense, index) => {\n            const { description, tag, method, value, currency, exchangeRates } = expense;\n            const { name, ask } = exchangeRates[currency];\n            return (\n              <tr key={ index }>\n                <td>{name}</td>\n                <td>{value}</td>\n                <td>{parseFloat(ask).toFixed(2)}</td>\n                <td>Real</td>\n                <td>{(ask * parseInt(value, 10)).toFixed(2)}</td>\n                <td>{description}</td>\n                <td>{tag}</td>\n                <td>{method}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(TabelaDespesa);\n\nTabelaDespesa.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object),\n};\n\nTabelaDespesa.defaultProps = {\n  expenses: [],\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { fetchCurrencies as getCurrencies } from '../actions';\nimport { TabelaDespesa, Header, NovaDespesa } from '../components';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { fetchCurrencies } = this.props;\n    fetchCurrencies();\n  }\n\n  render() {\n    return (\n      <main className=\"wallet-main\">\n        <Header />\n        <NovaDespesa />\n        <TabelaDespesa />\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrencies: () => dispatch(getCurrencies()),\n});\n\nexport default connect(null, mapDispatchToProps)(Wallet);\n\nWallet.propTypes = {\n  fetchCurrencies: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/carteira\" component={ Wallet } />\n      <Route exact path=\"/wallet\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer ser√° respons√°vel por tratar as informa√ß√µes da pessoa usu√°ria\nimport { EMAIL } from '../actions';\n\nconst INITIAL_STATE_USER = {\n  email: '',\n};\n\nexport default function user(state = INITIAL_STATE_USER, action) {\n  switch (action.type) {\n  case EMAIL:\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n}\n","import {\n  REQUEST_START,\n  REQUEST_SUCCESS,\n  REQUEST_FAIL,\n  SAVE_EXPENSE,\n} from '../actions';\n\nconst INITIAL_STATE_WALLET = {\n  currencies: [],\n  expenses: [],\n};\n\nexport default function wallet(state = INITIAL_STATE_WALLET, action) {\n  switch (action.type) {\n  case REQUEST_START:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case REQUEST_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currencies: [...Object.keys(action.currencies)],\n    };\n  case REQUEST_FAIL:\n    return { ...state, isFetching: false, error: action.error };\n  case SAVE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expenses],\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATEN√á√ÉO: voc√™ obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst reducer = combineReducers({ user, wallet });\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}